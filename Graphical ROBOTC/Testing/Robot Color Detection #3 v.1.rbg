<Version>1.0.1</Version>

<VariableList>
    <Variable>vari</Variable>
</VariableList>

<ProgrammingBlock type="comment">Reset values first</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="resetGyro">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">gyroSensor</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="resetMotorEncoder">
    <Parameters>
        <Parameter name="nMotorIndex" type="base typedef" typeDef="tMotor">armMotor</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorNone</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Lift up the arm and claw</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" default="motor10" typeDef="tMotor">clawMotor</Parameter>
        <Parameter name="quantity" type="float" default="1">-50</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short" default="50">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" default="motor10" typeDef="tMotor">armMotor</Parameter>
        <Parameter name="quantity" type="float" default="1">1000</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short" default="50">80</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Begin forward movement at half speed</ProgrammingBlock>

<ProgrammingBlock type="comment">Poll for the bump value while moving &amp; stop when true</ProgrammingBlock>

<ProgrammingBlock type="loop" commented="1" loopType="RepeatUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getBumperValue(bumpSwitch)</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="float">true</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">1</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short" default="50">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end" commented="1"/>

<ProgrammingBlock type="comment">Move backward one rotation</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">0.50</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short" default="50">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" commented="1" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" default="motor10" typeDef="tMotor">armMotor</Parameter>
        <Parameter name="quantity" type="float" default="1">-1000</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short" default="50">100</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="RepeatForever"/>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorYellow</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="IfOnly">
    <Parameters>
        <Parameter name="LHS" type="typedef">getColorHue(colorDetector)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="float">90</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Set the LED to Red</ProgrammingBlock>

<ProgrammingBlock type="comment">Red detector (red is 0)</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorRed</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">4</Parameter>
        <Parameter name="unitType" type="base typedef" default="seconds" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorYellow</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="loop" loopType="IfOnly">
    <Parameters>
        <Parameter name="LHS" type="typedef">getColorHue(colorDetector)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="float">180</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Set the LED to Blue</ProgrammingBlock>

<ProgrammingBlock type="comment">Blue detector (blue is 210) </ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorBlue</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">4</Parameter>
        <Parameter name="unitType" type="base typedef" default="seconds" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorYellow</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="comment">Play sound</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="playSound">
    <Parameters>
        <Parameter name="sound" type="base typedef" typeDef="TSounds">soundTada</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">4</Parameter>
        <Parameter name="unitType" type="base typedef" default="seconds" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="playSound">
    <Parameters>
        <Parameter name="sound" type="base typedef" typeDef="TSounds">soundSiren2</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, openLoop, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, openLoop, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, openLoop, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, openLoop, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, openLoop, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, openLoop, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


float vari;


task main()
{
	// Reset values first
	//resetGyro(gyroSensor);
	//resetMotorEncoder(armMotor);
	setTouchLEDColor(touchLED, colorNone);
	// Lift up the arm and claw
	//moveMotor(clawMotor, -50, degrees, 50);
	//moveMotor(armMotor, 1000, degrees, 80);
	// Begin forward movement at half speed
	// Poll for the bump value while moving &amp; stop when true
	//repeatUntil (getBumperValue(bumpSwitch) == true) {
		//forward(1, rotations, 50);
	//}
	// Move backward one rotation
	//backward(0.50, rotations, 50);
	//moveMotor(armMotor, -1000, degrees, 100);
	repeat (forever) {
		setTouchLEDColor(touchLED, colorYellow);
		if (getColorHue(colorDetector) &lt;= 90) {
			// Set the LED to Red
			// Red detector (red is 0)
			setTouchLEDColor(touchLED, colorRed);
			wait(4, seconds);
			setTouchLEDColor(touchLED, colorYellow);
		}
		if (getColorHue(colorDetector) &gt;= 180) {
			// Set the LED to Blue
			// Blue detector (blue is 210) 
			setTouchLEDColor(touchLED, colorBlue);
			wait(4, seconds);
			setTouchLEDColor(touchLED, colorYellow);
		}
		// Play sound
		playSound(soundTada);
		stopAllMotors();
		wait(4, seconds);
		playSound(soundSiren2);
	}
}
</CSource>
